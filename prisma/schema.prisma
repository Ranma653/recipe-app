// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Users{
  id String @id @default(uuid())
  username String @unique
  clerkUserId String @unique
  recipes Recipes[]
  email String @unique
}

model Catgeories{
  id Int @id @default(autoincrement())
  name String @unique //desert, main course, appetiser
  recipe Recipes[]
  spicy Float?
  allergy String?
  diet String?
}

model Ingredients {
  id Int @id @default(autoincrement())
  name String
  recipes RecipeIngredients[]
}

model Recipes{
  id Int @id @default(autoincrement())
  title String
  description String
  prepTime Int? //time in minutes
  cookTime Int
  servings Int?
  createdAt DateTime
  updatedAt DateTime
  categoryId Int
  userId String
  user Users @relation(fields: [userId], references: [clerkUserId])
  category Catgeories @relation(fields:[categoryId], references:[id])
  recipeIngredients RecipeIngredients[]
  steps Steps[]

}

model RecipeIngredients{
  id Int @id @default(autoincrement())
  quantity Float
  unit String //adds in cups and things
  recipeId Int
  ingredientId Int
  ingredient Ingredients @relation(fields: [ingredientId], references:[id])
  recipe Recipes @relation(fields:[recipeId], references:[id])

}

model Steps{
  id Int @id @default(autoincrement())
  description String
  recipeOrder Int
  recipeId Int
  recipe Recipes @relation(fields:[recipeId], references:[id])
}

enum Role{
  USER
  ADMIN
}